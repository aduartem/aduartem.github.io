---
layout: post
title: "üöÄ Gu√≠a pr√°ctica para construir APIs RESTful con Spring Boot"
date: 2025-06-10
last_modified_at: 2025-06-16
categories:
- java
- spring-boot
tags:
- Java
- Spring Boot
- REST API
image:
  path: /assets/images/posts/2025/07f58bb1-cb8e-4869-b0b9-10bca603ebc9.jpg
  alt: "Spring Boot"
---

> **Actualizaci√≥n [16/06/2025]**: Este art√≠culo ha sido actualizado para incluir una secci√≥n avanzada sobre mejores pr√°cticas con DTOs y separaci√≥n de responsabilidades, junto con una conclusi√≥n m√°s detallada sobre los beneficios de esta arquitectura.


Spring Boot se ha convertido en uno de los frameworks m√°s populares para desarrollar aplicaciones Java modernas. Su enfoque centrado en la simplicidad y la configuraci√≥n m√≠nima lo hace ideal para construir APIs REST de forma r√°pida y robusta. En esta gu√≠a te mostrar√© c√≥mo manejar rutas, controlar peticiones y respuestas, y estructurar tu aplicaci√≥n siguiendo buenas pr√°cticas. ¬°Comencemos!

## üå± ¬øQu√© es **Spring Boot**?

Es una extensi√≥n **opinada** de Spring que:

  * Simplifica la configuraci√≥n eliminando el "boilerplate".
  * Incluye **starters**: dependencias que ya agregan todo lo necesario (ej.: *spring-boot-starter-web*, *spring-boot-starter-data-jpa*, etc.)
  * Incorpora un servidor embebido (Tomcat, Jetty...) para ejecutar aplicaciones como jar ejecutables
  * Ofrece **autoconfiguraci√≥n** que detecta lo que tienes en el classpath y activa autom√°ticamente lo pertinente
  * Trae caracter√≠sticas "lista para producci√≥n": Actuator (m√©tricas, health checks), configuraci√≥n externa, logging integrado

## üè∑Ô∏è ¬øQu√© son las anotaciones en Spring?

Las **anotaciones** en Java (y en Spring) son **marcas especiales** que comienzan con `@` y se colocan sobre clases, m√©todos o atributos para darle instrucciones al framework sobre c√≥mo debe comportarse ese elemento.

En el contexto de **Spring**, las anotaciones reemplazan mucha configuraci√≥n manual (como XML) y hacen el c√≥digo m√°s limpio y f√°cil de mantener.


## üîß Ejemplos comunes de anotaciones en Spring Boot

| Anotaci√≥n                | ¬øPara qu√© sirve?                                                     |
| ------------------------ | -------------------------------------------------------------------- |
| `@SpringBootApplication` | Marca el punto de entrada principal de una app Spring Boot           |
| `@Component`             | Indica que una clase es un componente administrado por Spring        |
| `@Service`               | Similar a `@Component`, pero sem√°nticamente indica l√≥gica de negocio |
| `@Repository`            | Marca una clase que accede a la base de datos                        |
| `@Controller`            | Define una clase que maneja peticiones HTTP                          |
| `@Autowired`             | Inyecta autom√°ticamente dependencias                                 |


## üì¶ ¬øC√≥mo se importan?

En la mayor√≠a de los entornos de desarrollo como IntelliJ IDEA o Eclipse, cuando escribes una anotaci√≥n, el IDE suele sugerir autom√°ticamente el **import** correcto.

Pero tambi√©n puedes importarlas manualmente:

```java
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
```

üí° Estas anotaciones provienen de distintos paquetes dentro de Spring. Por ejemplo:

* `@Component`, `@Service`, `@Repository`: vienen de `org.springframework.stereotype`
* `@Autowired`: viene de `org.springframework.beans.factory.annotation`
* `@SpringBootApplication`: viene de `org.springframework.boot.autoconfigure`

## üåê Anotaciones para controladores REST en Spring

Las anotaciones en los controladores REST de Spring Boot permiten definir de manera sencilla c√≥mo se manejan las rutas y c√≥mo se recibe la informaci√≥n del cliente. Esto hace que la creaci√≥n de endpoints sea clara, flexible y f√°cil de mantener.

### Anotaciones para rutas seg√∫n el verbo HTTP

| Verbo HTTP | Anotaci√≥n        | Uso com√∫n                    |
|------------|------------------|------------------------------|
| GET        | `@GetMapping`    | Obtener recursos             |
| POST       | `@PostMapping`   | Crear nuevos recursos        |
| PUT        | `@PutMapping`    | Reemplazar recursos          |
| DELETE     | `@DeleteMapping` | Eliminar recursos            |
| PATCH      | `@PatchMapping`  | Actualizaci√≥n parcial        |

### Anotaciones para recibir datos del cliente

Estas anotaciones permiten a los controladores recibir informaci√≥n enviada por el cliente de distintas formas, facilitando la construcci√≥n de endpoints flexibles.

| Anotaci√≥n        | Uso principal                                                |
| ---------------- | ------------------------------------------------------------ |
| `@PathVariable`  | Extrae datos directamente de la **ruta URL**                 |
| `@RequestBody`   | Indica que un par√°metro del m√©todo viene del **cuerpo HTTP** |


`@PathVariable` se utiliza para capturar valores din√°micos que forman parte de la URL (por ejemplo, un identificador en `/api/tareas/123`), mientras que `@RequestBody` permite recibir y deserializar datos enviados en el cuerpo de la petici√≥n, como objetos JSON en operaciones POST o PUT.
Estas herramientas facilitan la construcci√≥n de endpoints flexibles y adaptados a diferentes necesidades de entrada de datos.

üí° Todas estas anotaciones pertenecen al **paquete `org.springframework.web.bind.annotation`**, el cual es esencial para construir controladores REST con Spring MVC o Spring Boot.

#### Importaci√≥n

Podemos importar cada anotaci√≥n de forma individual o usar el comod√≠n para importar todas:

```java
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
// o simplemente
import org.springframework.web.bind.annotation.*;
```


### Buenas pr√°cticas

- Utiliza DTOs para separar la l√≥gica de tu dominio del formato de entrada/salida.
- Valida los datos recibidos en el cuerpo de la petici√≥n usando anotaciones como `@Valid`.
- Mant√©n tus controladores enfocados solo en la l√≥gica de manejo de peticiones.


### Error com√∫n

- No validar los datos recibidos, lo que puede provocar errores en tiempo de ejecuci√≥n.

## Ejemplo completo: CRUD de tareas üóÇÔ∏è

```java
@RestController
@RequestMapping("/api/tasks")
public class TaskController {

    @Autowired
    private TaskService taskService;

    // GET: obtener una tarea
    @GetMapping("/{id}")
    public ResponseEntity<Task> getTaskById(@PathVariable Long id) {
        return taskService.getTaskById(id)
            .map(task -> new ResponseEntity<>(task, HttpStatus.OK))
            .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // POST: crear una tarea
    @PostMapping
    public ResponseEntity<Task> createTask(@RequestBody Task task) {
        Task created = taskService.saveTask(task);
        return new ResponseEntity<>(created, HttpStatus.CREATED);
    }

    // PUT: actualizar una tarea completamente
    @PutMapping("/{id}")
    public ResponseEntity<Task> updateTask(@PathVariable Long id, @RequestBody Task task) {
        return new ResponseEntity<>(taskService.updateTask(id, task), HttpStatus.OK);
    }

    // PATCH: actualizar parcialmente una tarea
    @PatchMapping("/{id}")
    public ResponseEntity<Task> patchTask(@PathVariable Long id, @RequestBody Map<String, Object> updates) {
        return new ResponseEntity<>(taskService.patchTask(id, updates), HttpStatus.OK);
    }

    // DELETE: eliminar una tarea
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTask(@PathVariable Long id) {
        taskService.deleteTask(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
```

## üîç Par√°metros din√°micos y consultas personalizadas

Ya sea extrayendo valores de la URL con `@PathVariable` o leyendo par√°metros de consulta con `@RequestParam`, Spring Boot te da herramientas claras para manejar solicitudes complejas.

### Ejemplo con par√°metros de b√∫squeda:

```java
@GetMapping("/search")
public ResponseEntity<List<Task>> searchTasks(
    @RequestParam String title,
    @RequestParam(required = false) Boolean completed
) {
    List<Task> tasks = taskService.findByTitleAndStatus(title, completed);
    return new ResponseEntity<>(tasks, HttpStatus.OK);
}
```

## üß± Separaci√≥n por capas: arquitectura limpia en Spring Boot

Para un desarrollo escalable, aplica una arquitectura multicapa:

- **Controller**: entrada de peticiones HTTP.
- **Service**: l√≥gica de negocio.
- **Repository**: acceso a base de datos.
- **DTO/Model**: transporte de datos y mapeo a entidades.

```bash
com.example.app
‚îú‚îÄ‚îÄ controller
‚îú‚îÄ‚îÄ service
‚îú‚îÄ‚îÄ repository
‚îú‚îÄ‚îÄ dto
‚îî‚îÄ‚îÄ model
```

## üíæ Persistencia con JPA + Hibernate

Spring Boot configura autom√°ticamente JPA (usualmente con Hibernate) para que puedas mapear objetos Java a tablas SQL f√°cilmente:

```java
@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private boolean completed;
}
```

Y para configurar la base de datos, basta con esto en `application.properties`:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/taskdb
spring.datasource.username=root
spring.datasource.password=tu_clave
spring.jpa.hibernate.ddl-auto=update
```

## üì¶ Uso de DTOs para separar entidades y transporte de datos

Un **DTO (Data Transfer Object)** es una clase que se utiliza para transportar datos entre el cliente y el servidor, sin exponer directamente las entidades del dominio.

### Ventajas de usar DTOs

- üîí Ocultas campos sensibles o irrelevantes de la entidad.
- üß© Puedes personalizar qu√© datos enviar o recibir seg√∫n el caso de uso.
- üîÑ Desacoplas la l√≥gica de persistencia del formato de comunicaci√≥n.

### Ejemplo de DTO para crear tareas:

```java
public class TaskCreateDTO {
    private String title;
    private boolean completed;

    // Getters y setters
}
```

Y para la respuesta:

```java
public class TaskDTO {
    private Long id;
    private String title;
    private boolean completed;

    public static TaskDTO fromEntity(Task task) {
        TaskDTO dto = new TaskDTO();
        dto.setId(task.getId());
        dto.setTitle(task.getTitle());
        dto.setCompleted(task.isCompleted());
        return dto;
    }
}
```

## üß™ Inyecci√≥n de dependencias en Spring Boot

La **inyecci√≥n de dependencias (DI)** permite a Spring proporcionar autom√°ticamente los objetos que una clase necesita, sin que ella los cree manualmente.

### Ventajas:

- üîÑ Menor acoplamiento entre clases.
- üß™ Facilita las pruebas unitarias.
- ‚ôªÔ∏è Mayor reutilizaci√≥n y mantenibilidad del c√≥digo.

### Ejemplo:

```java
@Service
public class TaskService {

    private final TaskRepository taskRepository;

    @Autowired // Constructor recomendado
    public TaskService(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    public Task saveTask(Task task) {
        return taskRepository.save(task);
    }
}
```

## üóÉÔ∏è Acceso a datos con Repository

La anotaci√≥n `@Repository` marca una interfaz como componente que accede a la base de datos. Usando `JpaRepository`, heredas m√©todos CRUD listos para usar.

```java
@Repository
public interface TaskRepository extends JpaRepository<Task, Long> {
    List<Task> findByCompleted(boolean completed);
}
```

## üîó Llevando todo a la pr√°ctica: POST con DTO + DI + Repository

```java
@RestController
@RequestMapping("/api/tasks")
public class TaskController {

    private final TaskService taskService;

    @Autowired
    public TaskController(TaskService taskService) {
        this.taskService = taskService;
    }

    @PostMapping
    public ResponseEntity<TaskDTO> createTask(@RequestBody TaskCreateDTO taskDto) {
        Task task = new Task();
        task.setTitle(taskDto.getTitle());
        task.setCompleted(taskDto.isCompleted());

        Task saved = taskService.saveTask(task);
        return new ResponseEntity<>(TaskDTO.fromEntity(saved), HttpStatus.CREATED);
    }
}
```

### Ventajas de esta implementaci√≥n

- ‚úÖ **DTO** protege tu modelo interno y simplifica la comunicaci√≥n con el cliente.
- ‚úÖ **Inyecci√≥n de dependencias** facilita pruebas y mantiene tu c√≥digo limpio.
- ‚úÖ **Repository** centraliza el acceso a la base de datos, usando interfaces concisas.


## üîó ¬øEste ejemplo es posible mejorarlo a√∫n m√°s? Definitivamente Si! *(Nuevo: 16/06/2025)*

Este ejemplo podemos mejorar de la siguiente forma:

1. ```TaskCreateDTO.java```

```java
import jakarta.validation.constraints.NotBlank;

public class TaskCreateDTO {

    @NotBlank(message = "El t√≠tulo es obligatorio")
    private String title;

    private boolean completed;

    // Getters y setters
}
```

2. ```TaskDTO.java```

```java
public class TaskDTO {

    private Long id;
    private String title;
    private boolean completed;

    // Constructor
    public TaskDTO(Long id, String title, boolean completed) {
        this.id = id;
        this.title = title;
        this.completed = completed;
    }

    public static TaskDTO fromEntity(Task task) {
        return new TaskDTO(task.getId(), task.getTitle(), task.isCompleted());
    }

    // Getters y setters (si usas Lombok puedes evitarlos)
}
```

3. ```TaskMapper.java```

```java
import org.springframework.stereotype.Component;

@Component
public class TaskMapper {

    public Task toEntity(TaskCreateDTO dto) {
        Task task = new Task();
        task.setTitle(dto.getTitle());
        task.setCompleted(dto.isCompleted());
        return task;
    }

    public TaskDTO toDto(Task task) {
        return new TaskDTO(task.getId(), task.getTitle(), task.isCompleted());
    }
}
```

4. ```TaskService.java```

```java
import org.springframework.stereotype.Service;

@Service
public class TaskService {

    private final TaskRepository taskRepository;
    private final TaskMapper taskMapper;

    public TaskService(TaskRepository taskRepository, TaskMapper taskMapper) {
        this.taskRepository = taskRepository;
        this.taskMapper = taskMapper;
    }

    public TaskDTO saveTask(TaskCreateDTO dto) {
        Task task = taskMapper.toEntity(dto);
        Task saved = taskRepository.save(task);
        return taskMapper.toDto(saved);
    }
}
```

5. ```TaskController.java``` (refactorizado)

```java
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/tasks")
public class TaskController {

    private final TaskService taskService;

    public TaskController(TaskService taskService) {
        this.taskService = taskService;
    }

    @PostMapping
    public ResponseEntity<TaskDTO> createTask(@RequestBody @Valid TaskCreateDTO taskDto) {
        TaskDTO saved = taskService.saveTask(taskDto);
        return new ResponseEntity<>(saved, HttpStatus.CREATED);
    }
}
```

6. ```ControllerAdvice``` para manejar errores de validaci√≥n (opcional pero recomendado)

```java
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(error ->
            errors.put(error.getField(), error.getDefaultMessage())
        );
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }
}
```


### Beneficios del cambio

| Mejora                          | Justificaci√≥n                                                                |
| ------------------------------- | ---------------------------------------------------------------------------- |
| Separaci√≥n de responsabilidades | El controlador solo orquesta, no construye entidades.                        |
| Validaci√≥n declarativa          | El DTO tiene validaciones con `@NotBlank`.                                   |
| Mapper dedicado                 | Se estandariza la transformaci√≥n entre DTOs y entidades.                     |
| M√°s testable                    | Cada clase tiene una √∫nica responsabilidad, facilitando los tests unitarios. |


### ¬øPor qu√© usar TaskDTO y TaskCreateDTO?

| Clase           | Uso                                       | Contenido t√≠pico                                                   |
| --------------- | ----------------------------------------- | ------------------------------------------------------------------ |
| `TaskCreateDTO` | **Entrada (request)** para crear tareas   | Solo campos que el cliente puede enviar (ej: `title`, `completed`) |
| `TaskDTO`       | **Salida (response)** para mostrar tareas | Campos calculados o internos: `id`, `createdAt`, `updatedAt`, etc. |


## üì¶ Despliegue con Docker üê≥

Ejemplo de Dockerfile para construir t√∫ imagen:

```Dockerfile
FROM eclipse-temurin:17-jdk
WORKDIR /app
COPY target/*.jar app.jar
ENTRYPOINT ["java","-jar","/app/app.jar"]
```

Ejemplo de configuraci√≥n de Docker Compose:

```yaml
version: '3'
services:
  app:
    build: .
    ports:
      - '8080:8080'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/taskdb
    depends_on:
      - db
  db:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=taskdb
```

## üß† Conclusi√≥n

Spring Boot es una herramienta poderosa para desarrollar APIs REST modernas y bien estructuradas. Gracias a su conjunto de anotaciones como `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping` y `@PatchMapping`, puedes construir endpoints eficientes de manera declarativa y clara üß©. Al combinarlo con una arquitectura por capas, patrones como DTO y pr√°cticas como el despliegue con Docker, obtienes una soluci√≥n completa y lista para producci√≥n üöÄ. Los principales beneficios de los temas abordados en esta gu√≠a son:

### üîß 1. Separaci√≥n de responsabilidades (SRP)
- El controlador (TaskController) ya no construye entidades, solo orquesta el flujo.
- La l√≥gica de negocio y persistencia se delega al TaskService.
- La transformaci√≥n entre DTOs y entidades queda encapsulada en TaskMapper.

***Beneficio***: m√°s limpio, m√°s testable y cada clase hace solo lo que le corresponde.

### üì¶ 2. Uso de DTOs
- Se utilizaron TaskCreateDTO para entradas (POST) y TaskDTO para salidas (responses).
- Esto protege la entidad interna (Task) de exposiciones innecesarias y errores de seguridad.

***Beneficio***: puedes controlar qu√© campos expone o recibe la API, manteniendo coherencia y evitando sobreexposici√≥n de datos.

### üßπ 3. Validaci√≥n declarativa
- Uso de anotaciones como @NotBlank, @Valid, y @ControllerAdvice para manejar errores de forma centralizada.

***Beneficio***: validaciones limpias, autom√°ticas, y respuestas uniformes ante errores de entrada.

### üß∞ 4. Inversi√≥n de dependencias y testabilidad
- TaskService y TaskMapper son f√°cilmente testeables y mockeables.
- El controlador es delgado y desacoplado, ideal para pruebas con MockMVC o RestAssured.

***Beneficio***: c√≥digo listo para escalar y con bajo acoplamiento, ideal para equipos grandes o proyectos profesionales.

### ‚öñÔ∏è ¬øVale la pena todo este esfuerzo?
S√≠, si tu proyecto:
- Tiene m√∫ltiples endpoints y va a escalar.
- Involucra equipos de desarrollo.
- Necesita testeo automatizado.
- Requiere exponer solo ciertos campos y proteger la l√≥gica de negocio.

En un proyecto simple o prototipo, puedes reducir el overhead, pero en un entorno profesional, esta arquitectura **es altamente recomendable**.


**Nota:** Pr√≥ximamente publicar√© una serie de post donde profundizar√© m√°s sobre los temas abordados ac√°.


## üåê Recursos web oficiales para profundizar

- [Spring Boot](https://spring.io/projects/spring-boot)
- [Gu√≠a Quickstart](https://spring.io/quickstart)
- [Construyendo una aplicaci√≥n con Spring Boot](https://spring.io/guides/gs/spring-boot)
- [Construyendo servicios web RESTful](https://spring.io/guides/gs/rest-service)
- [Gu√≠as](https://spring.io/guides)


## Historial de actualizaciones

- **16/06/2025**: A√±adida secci√≥n sobre implementaci√≥n avanzada con DTOs, mappers, y validaci√≥n. Ampliada la conclusi√≥n para destacar los beneficios de esta arquitectura.
- **10/06/2025**: Publicaci√≥n original